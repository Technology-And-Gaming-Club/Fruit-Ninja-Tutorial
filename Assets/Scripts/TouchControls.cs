//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""Touch Map"",
            ""id"": ""79486e7a-96c9-420a-9617-71fdfa15edad"",
            ""actions"": [
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c68cc1a8-b776-4039-b2b2-4e8111e3bcd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3b03234f-6823-4f89-8b69-8281cde97377"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""998cc2fb-9895-4d56-87b1-f9171ee6c13d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f73e9be5-860b-40a9-aaf4-d0f41cf15590"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21a3cbd0-db55-4dc6-9006-353178788816"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e35ce86e-bac9-401c-9b31-4a31ce9d3b61"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch Map
        m_TouchMap = asset.FindActionMap("Touch Map", throwIfNotFound: true);
        m_TouchMap_PrimaryContact = m_TouchMap.FindAction("PrimaryContact", throwIfNotFound: true);
        m_TouchMap_PrimaryPosition = m_TouchMap.FindAction("PrimaryPosition", throwIfNotFound: true);
        m_TouchMap_PrimaryDelta = m_TouchMap.FindAction("PrimaryDelta", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch Map
    private readonly InputActionMap m_TouchMap;
    private List<ITouchMapActions> m_TouchMapActionsCallbackInterfaces = new List<ITouchMapActions>();
    private readonly InputAction m_TouchMap_PrimaryContact;
    private readonly InputAction m_TouchMap_PrimaryPosition;
    private readonly InputAction m_TouchMap_PrimaryDelta;
    public struct TouchMapActions
    {
        private @TouchControls m_Wrapper;
        public TouchMapActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryContact => m_Wrapper.m_TouchMap_PrimaryContact;
        public InputAction @PrimaryPosition => m_Wrapper.m_TouchMap_PrimaryPosition;
        public InputAction @PrimaryDelta => m_Wrapper.m_TouchMap_PrimaryDelta;
        public InputActionMap Get() { return m_Wrapper.m_TouchMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchMapActions set) { return set.Get(); }
        public void AddCallbacks(ITouchMapActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchMapActionsCallbackInterfaces.Add(instance);
            @PrimaryContact.started += instance.OnPrimaryContact;
            @PrimaryContact.performed += instance.OnPrimaryContact;
            @PrimaryContact.canceled += instance.OnPrimaryContact;
            @PrimaryPosition.started += instance.OnPrimaryPosition;
            @PrimaryPosition.performed += instance.OnPrimaryPosition;
            @PrimaryPosition.canceled += instance.OnPrimaryPosition;
            @PrimaryDelta.started += instance.OnPrimaryDelta;
            @PrimaryDelta.performed += instance.OnPrimaryDelta;
            @PrimaryDelta.canceled += instance.OnPrimaryDelta;
        }

        private void UnregisterCallbacks(ITouchMapActions instance)
        {
            @PrimaryContact.started -= instance.OnPrimaryContact;
            @PrimaryContact.performed -= instance.OnPrimaryContact;
            @PrimaryContact.canceled -= instance.OnPrimaryContact;
            @PrimaryPosition.started -= instance.OnPrimaryPosition;
            @PrimaryPosition.performed -= instance.OnPrimaryPosition;
            @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
            @PrimaryDelta.started -= instance.OnPrimaryDelta;
            @PrimaryDelta.performed -= instance.OnPrimaryDelta;
            @PrimaryDelta.canceled -= instance.OnPrimaryDelta;
        }

        public void RemoveCallbacks(ITouchMapActions instance)
        {
            if (m_Wrapper.m_TouchMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchMapActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchMapActions @TouchMap => new TouchMapActions(this);
    public interface ITouchMapActions
    {
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
        void OnPrimaryDelta(InputAction.CallbackContext context);
    }
}
